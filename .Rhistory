chicago_by_date %>%
select(date, pm25tmean2) %>%
head(3)
chicago_by_date %>%
select(date, pm25tmean2) %>%
tail(3)
chicago %>%
arrange(desc(date)) %>%
head()
chicago %>%
arrange(desc(date)) %>%
head()
head(chicago[, 1:5], 3)
chicago <- chicago %>%
rename(dewpoint = dptp, pm25 = pm25tmean2)
chicago %>%
head(3)
chicago <- chicago %>%
mutate(pm25detrend = pm25 - mean(pm25, na.rm = TRUE))
chicago %>%
head()
chicago <- chicago %>%
mutate(pm25detrend = pm25 - mean(pm25, na.rm = TRUE))
chicago %>%
head()
chicago %>%
transmute(pm10detrend = pm10tmean2 - mean(pm10tmean2, na.rm = TRUE),
o3detrend = o3tmean2 - mean(o3tmean2, na.rm = TRUE))
chicago <- chicago %>%
mutate(year = as.POSIXlt(date)$year + 1900)
head(chicago)
years <- chicago %>%
group_by(year) %>%
summarize(pm25 = mean(pm25, na.rm = TRUE),
o3 = max(o3tmean2, na.rm = TRUE),
no2 = median(no2tmean2, na.rm = TRUE), .groups = "drop")
head(years)
qq <- quantile(chicago$pm25, seq(0, 1, 0.2), na.rm = TRUE)
chicago %>%
mutate(pm25.quint = cut(pm25, qq)) %>%
group_by(pm25.quint) %>%
summarize(o3 = mean(o3tmean2, na.rm = TRUE),
no2 = mean(no2tmean2, na.rm = TRUE),
.groups = "drop")
qq <- quantile(chicago$pm25, seq(0, 1, 0.2), na.rm = TRUE)
qq
chicago %>%
mutate(month = as.POSIXlt(date)$mon + 1) %>%
group_by(month) %>%                              # SPLIT
summarize(pm25 = mean(pm25, na.rm = TRUE),       # APPLY
o3 = max(o3tmean2, na.rm = TRUE),
no2 = median(no2tmean2, na.rm = TRUE),
.groups = "drop")
# COMBINE (in the result)
tibble(
a = lubridate::now() + runif(1e3) * 86400,
b = lubridate::today() + runif(1e3) * 30,
c = 1:1e3,
d = runif(1e3),
e = sample(letters, 1e3, replace = TRUE)
)
tibble(
a = lubridate::now() + runif(1e3) * 86400,
b = lubridate::today() + runif(1e3) * 30,
c = 1:1e3,
d = runif(1e3),
e = sample(letters, 1e3, replace = TRUE)
) %<% head()
tibble(
a = lubridate::now() + runif(1e3) * 86400,
b = lubridate::today() + runif(1e3) * 30,
c = 1:1e3,
d = runif(1e3),
e = sample(letters, 1e3, replace = TRUE)
) %>% head()
tibble(x = c("NA", NA))
library(nycflights13)
flights %>%
print(n = 10, width = Inf)
library(nycflights13)
flights %>%
print(n = 10, width = Inf) %>% head(10)
library(nycflights13)
flights %>%
print(n = 10, width = Inf)
#| eval: false
flights %>%
View()
tb <- tibble(
id = LETTERS[1:5],
x1  = 1:5,
y1  = 6:10
)
tb %>%
pull(x1) # by name
tb %>%
pull(1)  # by position
tb %>%
pull(1)  # by position
tb %>%
pull(x1, name = id)
tb$x1
tb[["x1"]]
tb[[1]]
# Tibbles complain a lot:
tb$x
tb$z
# Tibbles complain a lot:
tb$x
tb$z
# Data frame use partial matching and don't complain if a column doesn't exist
df <- as.data.frame(tb)
df$x
df$z
#| eval: false
flights %>%
View()
quota <- 225000
# Put parameters into a data structure
df <- data.frame(
cut         = c(.4, .3, .2, .1),
payout_pct  = c(.07, .1, .13, .16)
)
# The combined percentage
df$cut_sum <- cumsum(df$cut)
# Amount of quota in each bracket
df$amt <- df$cut * quota
# The (max) payout for each bracket
df$payout <- df$amt * df$payout_pct
# The cumulative sum of the payout
df$payout_sum <- cumsum(df$payout)
# The cumulative sum of the earned quota
df$amt_sum <- cumsum(df$amt)
df
quota <- 225000
# Put parameters into a data structure
df <- data.frame(
cut         = c(.4, .3, .2, .1),
payout_pct  = c(.07, .1, .13, .16)
)
# The combined percentage
df$cut_sum <- cumsum(df$cut)
# Amount of quota in each bracket
df$amt <- df$cut * quota
# The (max) payout for each bracket
df$payout <- df$amt * df$payout_pct
# The cumulative sum of the payout
df$payout_sum <- cumsum(df$payout)
# The cumulative sum of the earned quota
df$amt_sum <- cumsum(df$amt)
get_payout <- function(qq_frac) {
# Get lower row index
row1 <- nrow(df[qq_frac >= df$cut_sum, ])
# Get current row index
row2 <- row1 + 1
# Compute percent for current bracket
if (row1 > 0) {
cut_sum <- round(df[row1, 'cut_sum'], 1)
} else {
cut_sum <- 0
}
remainder <- round(qq_frac, 1) - cut_sum
# Get payout for this bracket
if (row2 <= 4) {
b <- quota * df[row2, 'payout_pct'] * remainder
} else {
b <- 0
}
# Get payout of previous brackets
if (row1 > 0) {
a <- df[row1, 'payout_sum']
} else {
a <- 0
}
# Compute the total
payout <- a + b
# Return results
return(payout)
}
df2 <- data.frame(i = seq(.1, 1, by=.1))
df2$payout <- apply(df2, 1, get_payout)
df2
plot(df[c('amt_sum','payout_sum')], type='b')
df2$earned = df2$i * quota
plot(df2[c('earned','payout')], type='b')
install.packages("Hmisc")
4+6+5+9+5+10
39 + 11 + 16 + 13
+6
5
25 / 3
10 + 10 + 5
7 + 7
8 + 10 + 12
5 + 10
7 + 7
7 + 7 + 11
25 - 9
25 - 18
pwd
# install.packages("vctrs")
library(vctrs)
library(vctrs)
# install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
mpg %>% ggplot()
mpg %>%
ggplot(aes(x = cyl, y = hwy)) +
geom_point()
library(tidyverse)
iris %>%
ggplot(
mapping = aes(
x = Sepal.Length,
y = Sepal.Width)
) +
geom_point(size=3, aes(color=Species))
iris %>%
ggplot(aes(
x = Sepal.Length,
y = Sepal.Width)) +
geom_point(size=3, aes(color=Species)) +
stat_smooth(method = lm)
iris %>%
ggplot(aes(
x = Sepal.Length,
y = Sepal.Width)) +
geom_point(size=3, aes(color=Species)) +
stat_smooth(method = lm) +
facet_wrap(facets = vars(Species))
iris %>%
ggplot(aes(
x = Sepal.Length,
y = Sepal.Width)) +
geom_point(size=3, aes(color=Species)) +
stat_smooth(method = lm) +
stat_smooth(method = lm, se=FALSE, aes(color=Species))
diamonds
diamonds %>%
ggplot(aes(x=carat, y=price)) +
geom_point()
gg <- ggplot(diamonds, aes(x=carat, y=price))
gg + geom_point()
gg + geom_point(
size=1,
shape=1,
color="steelblue",
stroke=2)
gg + geom_point(aes(
size=carat,
shape=cut,
color=color,
stroke=carat))
gg1 <- gg + geom_point(aes(color=color))
gg2 <- gg1 + labs(title="Diamonds", x="Carat", y="Price")
gg2
gg2 + theme(text=element_text(color="blue"))  # all text turns blue.
gg3 <- gg2 +
theme(plot.title=element_text(size=25),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20),
axis.text.x=element_text(size=15),
axis.text.y=element_text(size=15)
)
gg3
gg3 +
labs(title = "Plot Title\nSecond Line of Plot Title") +
theme(plot.title = element_text(
face="bold",
color="steelblue",
lineheight=1.2)
)
gg3 + scale_colour_manual(
name='Legend',
values=c('D'='grey',
'E'='red',
'F'='blue',
'G'='yellow',
'H'='black',
'I'='green',
'J'='firebrick'))
gg3 + coord_cartesian(xlim=c(0,3), ylim=c(0, 5000)) + geom_smooth()  # zoom in
gg3 +
coord_cartesian(xlim=c(0,3), ylim=c(0, 5000)) +
geom_smooth()  # zoom in
gg3 +
xlim(c(0,3)) +
ylim(c(0, 5000)) +
geom_smooth()  # deletes the points
gg3 + scale_x_continuous(limits=c(0,3)) +
scale_y_continuous(limits=c(0, 5000)) +
geom_smooth()  # deletes the points outside limits
gg3 + scale_x_continuous(
labels=c("zero", "one", "two", "three", "four", "five"))
scale_y_continuous(breaks=seq(0, 20000, 4000))  # if Y is continuous, if X is a factor
gg3 + coord_flip()  # flips X and Y axis.
gg3 + theme(panel.background = element_rect(fill = 'springgreen'),
panel.grid.major = element_line(colour = "firebrick", size=3),
panel.grid.minor = element_line(colour = "blue", size=1))
gg3 + theme(plot.background=element_rect(fill="yellowgreen"), plot.margin = unit(c(2, 4, 1, 3), "cm")) # top, right, bottom, left
gg3 + theme(legend.position="none")  # hides the legend
library(tidyverse)
iris %>%
ggplot(
mapping = aes(
x = Sepal.Length,
y = Sepal.Width)
) +
geom_point(size=3, aes(color=Species))
iris %>%
ggplot(aes(
x = Sepal.Length,
y = Sepal.Width)) +
geom_point(size=3, aes(color=Species)) +
stat_smooth(method = lm)
iris %>%
ggplot(aes(
x = Sepal.Length,
y = Sepal.Width)) +
geom_point(size=3, aes(color=Species)) +
stat_smooth(method = lm) +
facet_wrap(facets = vars(Species))
iris %>%
ggplot(aes(
x = Sepal.Length,
y = Sepal.Width)) +
geom_point(size=3, aes(color=Species)) +
stat_smooth(method = lm) +
stat_smooth(method = lm, se=FALSE, aes(color=Species))
diamonds
diamonds %>%
ggplot(aes(x=carat, y=price)) +
geom_point()
gg <- ggplot(diamonds, aes(x=carat, y=price))
gg + geom_point()
gg + geom_point(
size=1,
shape=1,
color="steelblue",
stroke=2)
gg + geom_point(aes(
size=carat,
shape=cut,
color=color,
stroke=carat))
gg1 <- gg + geom_point(aes(color=color))
gg2 <- gg1 + labs(title="Diamonds", x="Carat", y="Price")
gg2
gg2 + theme(text=element_text(color="blue"))  # all text turns blue.
gg3 <- gg2 +
theme(plot.title=element_text(size=25),
axis.title.x=element_text(size=20),
axis.title.y=element_text(size=20),
axis.text.x=element_text(size=15),
axis.text.y=element_text(size=15)
)
gg3
gg3 +
labs(title = "Plot Title\nSecond Line of Plot Title") +
theme(plot.title = element_text(
face="bold",
color="steelblue",
lineheight=1.2)
)
gg3 + scale_colour_manual(
name='Legend',
values=c('D'='grey',
'E'='red',
'F'='blue',
'G'='yellow',
'H'='black',
'I'='green',
'J'='firebrick'))
gg3 +
coord_cartesian(xlim=c(0,3), ylim=c(0, 5000)) +
geom_smooth()  # zoom in
gg3 +
xlim(c(0,3)) +
ylim(c(0, 5000)) +
geom_smooth()  # deletes the points
gg3 + scale_x_continuous(limits=c(0,3)) +
scale_y_continuous(limits=c(0, 5000)) +
geom_smooth()  # deletes the points outside limits
gg3 + scale_x_continuous(
labels=c("zero", "one", "two", "three", "four", "five"))
scale_y_continuous(breaks=seq(0, 20000, 4000))  # if Y is continuous, if X is a factor
gg3 + theme(axis.text.x=element_text(angle=45), axis.text.y=element_text(angle=45))
gg3 + coord_flip()  # flips X and Y axis.
gg3 + theme(panel.background = element_rect(fill = 'springgreen'),
panel.grid.major = element_line(colour = "firebrick", size=3),
panel.grid.minor = element_line(colour = "blue", size=1))
gg3 + theme(plot.background=element_rect(fill="yellowgreen"), plot.margin = unit(c(2, 4, 1, 3), "cm")) # top, right, bottom, left
gg3 + theme(legend.position="none")  # hides the legend
gg3 + scale_color_discrete(name="")  # Remove legend title (method1)
# Remove legend title (method)
p1 <- gg3 + theme(legend.title=element_blank())
# Change legend title
p2 <- gg3 + scale_color_discrete(name="Diamonds")
# install.packages("gridExtra")
library(gridExtra)
grid.arrange(p1, p2, ncol=2)  # arrange
gg3 + scale_colour_manual(name='Legend', values=c('D'='grey', 'E'='red', 'F'='blue', 'G'='yellow', 'H'='black', 'I'='green', 'J'='firebrick'))
p1 <- gg3 + theme(legend.position="top")  # top / bottom / left / right
p2 <- gg3 + theme(legend.justification=c(1,0), legend.position=c(1,0))  # legend justification is the anchor point on the legend, considering the bottom left of legend as (0,0)
gridExtra::grid.arrange(p1, p2, ncol=2)
#df$newLegendColumn <- factor(df$legendcolumn, levels=c(new_order_of_legend_items), ordered = TRUE)
gg3 + theme(legend.title = element_text(size=20, color = "firebrick"), legend.text = element_text(size=15), legend.key=element_rect(fill='steelblue')) + guides(colour = guide_legend(override.aes = list(size=2, shape=4, stroke=2)))  # legend title color and size, box color, symbol color, size and shape.
# Not Run: gg + geom_text(aes(xcol, ycol, label=round(labelCol), size=3))
# general format
gg + geom_text(aes(label=color, color=color), size=4)
library(grid)
my_grob = grobTree(textGrob("My Custom Text", x=0.8, y=0.2,
gp=gpar(col="firebrick", fontsize=25, fontface="bold")))
gg3 + annotation_custom(my_grob)
p1 <- gg1 + facet_grid(color ~ cut) # arrange in a grid. More space for plots. Free X and Y axis scales
p2 <- gg1 + facet_wrap(color ~ cut, scales="free") # free the x and yaxis scales.
library(gridExtra)
grid.arrange(p1, p2, ncol=2)
gg3 + geom_smooth(aes(color=color)) # method could be - 'lm', 'loess', 'gam'
p1 <- gg3 + geom_hline(yintercept=5000, size=2, linetype="dotted", color="blue") # linetypes: solid, dashed, dotted, dotdash, longdash and twodash
p2 <- gg3 + geom_vline(xintercept=4, size=2, color="firebrick")
p3 <- gg3 + geom_segment(aes(x=4, y=5000, xend=4, yend=10000, size=2, lineend="round"))
p4 <- gg3 + geom_segment(aes(x=carat, y=price,
xend=carat, yend=price-500, color=color), size=2) + coord_cartesian(xlim=c(3, 5)) # x, y: start points. xend, yend: endpoints
gridExtra::grid.arrange(p1,p2,p3,p4, ncol=2)
# Frequency bar chart: Specify only X axis.
gg <- ggplot(mtcars, aes(x=cyl))
gg + geom_bar() # frequency table
gg <- ggplot(mtcars, aes(x=cyl))
p1 <- gg + geom_bar(position="dodge", aes(fill=factor(vs))) # side-by-side
p2 <- gg + geom_bar(aes(fill=factor(vs))) # stacked
gridExtra::grid.arrange(p1, p2, ncol=2)
# Absolute bar chart: Specify both X adn Y axis. Set stat="identity"
df <- aggregate(mtcars$mpg, by=list(mtcars$cyl), FUN=mean)  # mean of mpg for every 'cyl'
names(df) <- c("cyl", "mpg")
head(df)
#>   cyl    mpg
#> 1   4  26.66
#> 2   6  19.74
#> 3   8  15.10
gg_bar <- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = "identity")  # Y axis is explicit. 'stat=identity'
print(gg_bar)
gg_bar <- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = "identity", aes(fill=cyl))
print(gg_bar)
df$cyl <- as.factor(df$cyl)
gg_bar <- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = "identity", aes(fill=cyl), width = 0.25)
gg_bar + scale_fill_manual(values=c("4"="steelblue", "6"="firebrick", "8"="darkgreen"))
library(RColorBrewer)
display.brewer.all(n=20, exact.n=FALSE)  # display available color palettes
ggplot(mtcars, aes(x=cyl, y=carb, fill=factor(cyl))) + geom_bar(stat="identity") + scale_fill_brewer(palette="Reds")  # "Reds" is palette name
# Method 1:
gg <- ggplot(economics, aes(x=date))  # setup
gg + geom_line(aes(y=psavert), size=2, color="firebrick") + geom_line(aes(y=uempmed), size=1, color="steelblue", linetype="twodash")  # No legend
# available linetypes: solid, dashed, dotted, dotdash, longdash and twodash
# Method 2:
#install.packages("reshape2")
library(reshape2)
df_melt <- melt(economics[, c("date", "psavert", "uempmed")], id="date")  # melt by date.
gg <- ggplot(df_melt, aes(x=date))  # setup
gg + geom_line(aes(y=value, color=variable), size=1) + scale_color_discrete(name="Legend")  # gets legend.
# One step method.
# install.packages("ggfortify")
library(ggfortify)
autoplot(AirPassengers, size=2) + labs(title="AirPassengers")
# Prepare the dataframe
st_year <- start(AirPassengers)[1]
st_month <- "01"
st_date <- as.Date(paste(st_year, st_month, "01", sep="-"))
dates <- seq.Date(st_date, length=length(AirPassengers), by="month")
df <- data.frame(dates, AirPassengers, AirPassengers/2)
head(df)
#>        dates AirPassengers AirPassengers.2
#> 1 1949-01-01           112            56.0
#> 2 1949-02-01           118            59.0
#> 3 1949-03-01           132            66.0
#> 4 1949-04-01           129            64.5
#> 5 1949-05-01           121            60.5
#> 6 1949-06-01           135            67.5
# Plot ribbon with ymin=0
gg <- ggplot(df, aes(x=dates)) + labs(title="AirPassengers") + theme(plot.title=element_text(size=30), axis.title.x=element_text(size=20), axis.text.x=element_text(size=15))
gg + geom_ribbon(aes(ymin=0, ymax=AirPassengers)) + geom_ribbon(aes(ymin=0, ymax=AirPassengers.2), fill="green")
gg + geom_ribbon(aes(ymin=AirPassengers-20, ymax=AirPassengers+20)) + geom_ribbon(aes(ymin=AirPassengers.2-20, ymax=AirPassengers.2+20), fill="green")
# Method1: Non-Overlapping Area
df <- reshape2::melt(economics[, c("date", "psavert", "uempmed")], id="date")
head(df, 3)
#>         date variable value
#> 1 1967-07-01  psavert  12.5
#> 2 1967-08-01  psavert  12.5
#> 3 1967-09-01  psavert  11.7
p1 <- ggplot(df, aes(x=date)) + geom_area(aes(y=value, fill=variable)) + labs(title="Non-Overlapping - psavert and uempmed")
# Method2: Overlapping Area
p2 <- ggplot(economics, aes(x=date)) + geom_area(aes(y=psavert), fill="yellowgreen", color="yellowgreen") + geom_area(aes(y=uempmed), fill="dodgerblue", alpha=0.7, linetype="dotted") + labs(title="Overlapping - psavert and uempmed")
gridExtra::grid.arrange(p1, p2, ncol=2)
p1 <- ggplot(mtcars, aes(factor(cyl), mpg)) + geom_boxplot(aes(fill = factor(cyl)), width=0.5, outlier.colour = "dodgerblue", outlier.size = 4, outlier.shape = 16, outlier.stroke = 2, notch=T) + labs(title="Box plot")  # boxplot
p2 <- ggplot(mtcars, aes(factor(cyl), mpg)) + geom_violin(aes(fill = factor(cyl)), width=0.5, trim=F) + labs(title="Violin plot (untrimmed)")  # violin plot
gridExtra::grid.arrange(p1, p2, ncol=2)
ggplot(mtcars, aes(mpg)) + geom_density(aes(fill = factor(cyl)),
size=2) + labs(title="Density plot")
corr <- round(cor(mtcars), 2)
df <- reshape2::melt(corr)
gg <- ggplot(df, aes(x=Var1, y=Var2, fill=value, label=value)) + geom_tile() + theme_bw() + geom_text(aes(label=value, size=value), color="white") + labs(title="mtcars - Correlation plot") + theme(text=element_text(size=20), legend.position="none")
library(RColorBrewer)
p2 <- gg + scale_fill_distiller(palette="Reds")
p3 <- gg + scale_fill_gradient2()
gridExtra::grid.arrange(gg, p2, p3, ncol=3)
